#This problem can be found at https://projecteuler.net/problem=4
#================================================================
# A palindromic number reads the same both ways.
# The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
# Find the largest palindrome made from the product of two 3-digit numbers.
#=================================================================

#pseudo-code idea
# two for loops nested for product A*B
# one loop to iterate across all 3 digit A for a given B
# one loop to increment B
# as we do this, check if palindrome and add to a list
# at the end find the max of the list

# other thoughts about idea:
# keep in mind commutative property (2*8 = 8*2), so that means I can cut computation in half if I consider this symmetry
# By what fraction does it reduce computation, my intuition is 1/2, maybe not worth the extra effort?
# perhaps I'll come back to a faster algorithm as a stretch goal

# import time

palindromes = []

#less computationally efficient code

for A in range(1,1000):
    for B in range(1,1000):
        wordy_number = str(A*B) # since strings are subscriptable, they are easy to reverse :)
        if wordy_number == wordy_number[::-1]:
            print('palindrome', wordy_number)
            palindromes.append(int(wordy_number))

palindromes.sort(reverse = True)
print(palindromes)

#output inefficient code:
# [906609, 906609, 888888, 888888, 886688, 886688, 861168, 861168, 855558, 855558, 853358, 853358, 840048, 840048, 828828, 828828, 828828, 828828, 824428, 824428, 821128, 821128, 819918, 819918, 809908, 809908, 807708, 807708, 804408,
#  804408, 802208, 802208, 801108, 801108, 793397, 793397, 780087, 780087, 770077, 770077, 749947, 749947, 747747, 747747, 737737, 737737, 729927, 729927, 723327, 723327, 698896, 698896, 698896, 696696, 696696, 696696, 696696, 696696,
#  696696, 693396, 693396, 689986, 689986, 678876, 678876, 675576, 675576, 672276, 672276, 666666, 666666, 666666, 666666, 666666, 666666, 663366, 663366, 661166, 661166, 660066, 660066, 657756, 657756, 656656, 656656, 654456, 654456,
#  654456, 654456, 653356, 653356, 652256, 652256, 650056, 650056, 650056, 650056, 649946, 649946, 648846, 648846, 642246, 642246, 639936, 639936, 639936, 639936, 636636, 636636, 636636, 636636, 631136, 631136, 630036, 630036, 630036,
#  630036, 623326, 623326, 619916, 619916, 618816, 618816, 616616, 616616, 616616, 616616, 612216, 612216, 611116, 611116, 611116, 611116, 611116, 611116
# ...
# 777, 777, 777, 777, 777, 777, 777, 777, 767, 767, 767, 767, 757, 757, 747, 747, 747, 747, 747, 747, 737, 737, 737, 737, 727, 727, 717, 717, 717, 717, 707,
#  707, 707, 707, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 686, 686, 686, 686, 686, 686, 686, 686, 676, 676, 676, 676, 676, 676, 676, 676, 676, 666, 666, 666, 666, 666, 666, 666, 666, 666, 666, 6
# 66, 666, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 646, 646, 646, 646, 646, 646, 646, 646, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 636, 626, 626, 626, 626, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616
# , 616, 616, 616, 616, 616, 606, 606, 606, 606, 606, 606, 606, 606, 595, 595, 595, 595, 595, 595, 595, 595, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 575, 575, 575, 575, 575, 575, 565, 565, 565, 565, 555, 555, 555,
# 555, 555, 555, 555, 555, 545, 545, 545, 545, 535, 535, 535, 535, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 515, 515, 515, 515, 505, 505, 505, 505, 494, 494, 494, 494, 494, 494, 494, 494, 484, 484, 484, 484, 484, 48
# 4, 484, 484, 484, 474, 474, 474, 474, 474, 474, 474, 474, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 454, 454, 454, 454, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 434, 434, 434, 434, 434, 434, 434, 434, 424,
#  424, 424, 424, 424, 424, 424, 424, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 404, 404, 404, 404, 404, 404, 393, 393, 393, 393, 383, 383, 373, 373, 363, 363, 363, 363, 363, 363, 353, 353, 343, 343, 343, 343, 333, 3
# 33, 333, 333, 333, 333, 323, 323, 323, 323, 313, 313, 303, 303, 303, 303, 292, 292, 292, 292, 292, 292, 282, 282, 282, 282, 282, 282, 282, 282, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 262, 262, 262, 262, 252, 252, 252, 252
# , 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 242, 242, 242, 242, 242, 242, 232, 232, 232, 232, 232, 232, 232, 232, 222, 222, 222, 222, 222, 222, 222, 222, 212, 212, 212, 212, 212, 212, 202, 202, 202, 202,
# 191, 191, 181, 181, 171, 171, 171, 171, 171, 171, 161, 161, 161, 161, 151, 151, 141, 141, 141, 141, 131, 131, 121, 121, 121, 111, 111, 111, 111, 101, 101, 99, 99, 99, 99, 99, 99, 88, 88, 88, 88, 88, 88, 88, 88, 77, 77, 77, 77, 66, 6
# 6, 66, 66, 66, 66, 66, 66, 55, 55, 55, 55, 44, 44, 44, 44, 44, 44, 33, 33, 33, 33, 22, 22, 22, 22, 11, 11, 9, 9, 9, 8, 8, 8, 8, 7, 7, 6, 6, 6, 6, 5, 5, 4, 4, 4, 3, 3, 2, 2, 1]

#stretch goal, more computationally efficient code












